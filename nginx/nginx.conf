events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # ログ設定
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # 基本設定
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # gzip圧縮を有効化
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain application/json application/javascript text/css application/xml;

    # バックエンドアプリケーションアップストリーム
    upstream backend {
        server backend:8080;
    }

    # Rundeckアップストリーム
    upstream rundeck {
        server rundeck:4440;
    }

    # HTTPサーバー設定
    server {
        listen 80;
        server_name localhost;

        # セキュリティヘッダー完全無効化（Rundeck完全動作のため）
        # add_header X-Frame-Options SAMEORIGIN;
        # add_header X-Content-Type-Options nosniff;
        # add_header X-XSS-Protection "1; mode=block";
        # add_header Referrer-Policy "strict-origin-when-cross-origin";
        # CSPヘッダーの完全除去
        proxy_hide_header Content-Security-Policy;
        proxy_hide_header X-Content-Security-Policy;
        proxy_hide_header X-WebKit-CSP;


        # Rundeckへの認証付きプロキシ
        location /rundeck/ {
            # 認証チェック
            auth_request /auth/verify;

            # 認証エラー時のリダイレクト
            error_page 401 = @auth_redirect;

            # 認証ヘッダーを設定
            auth_request_set $auth_user $upstream_http_x_auth_request_user;
            auth_request_set $auth_email $upstream_http_x_auth_request_email;
            auth_request_set $auth_given_name $upstream_http_x_auth_request_given_name;
            auth_request_set $auth_family_name $upstream_http_x_auth_request_family_name;
            auth_request_set $auth_roles $upstream_http_x_auth_request_roles;

            # セキュリティヘッダー完全除去（Rundeck機能優先）
            proxy_hide_header Content-Security-Policy;
            proxy_hide_header X-Content-Security-Policy;
            proxy_hide_header X-WebKit-CSP;
            proxy_hide_header X-Frame-Options;
            proxy_hide_header X-Content-Type-Options;
            proxy_hide_header X-XSS-Protection;

            # Rundeckコンテナにプロキシ
            proxy_pass http://rundeck/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # Rundeck認証ヘッダー
            proxy_set_header X-Auth-Request-Email $auth_email;
            proxy_set_header X-Auth-Request-User $auth_user;
            proxy_set_header X-Auth-Request-Given-Name $auth_given_name;
            proxy_set_header X-Auth-Request-Family-Name $auth_family_name;
            proxy_set_header X-Auth-Request-Roles $auth_roles;
            proxy_set_header REMOTE_USER_EMAIL $auth_email;

            # WebSocket サポート
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # タイムアウト設定
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

                # Rundeck静的アセット（認証不要）
        location /assets/ {
            # 全てのアセットリクエストをRundeckに転送
            proxy_pass http://rundeck;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # セキュリティヘッダー完全除去（静的ファイル用）
            proxy_hide_header Content-Security-Policy;
            proxy_hide_header X-Content-Security-Policy;
            proxy_hide_header X-WebKit-CSP;

            # キャッシュ設定
            expires 1d;
            add_header Cache-Control "public, immutable";

            # エラー処理を無効化（404を許可）
            proxy_intercept_errors off;
        }

        # 🔧 包括的プラグイン処理（すべてのRundeckプラグイン）
        location ~* ^/plugin/.*$ {
            proxy_pass http://rundeck;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # セキュリティヘッダー完全除去（プラグインファイル用）
            proxy_hide_header Content-Security-Policy;
            proxy_hide_header X-Content-Security-Policy;
            proxy_hide_header X-WebKit-CSP;
            proxy_hide_header X-Frame-Options;
            proxy_hide_header X-Content-Type-Options;
            proxy_hide_header X-XSS-Protection;

            # エラー処理無効化
            proxy_intercept_errors off;

            # 長いタイムアウト設定（プラグイン処理用）
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # 🔧 包括的アセット処理（すべてのRundeckアセット）
        location ~* ^/assets/.*$ {
            proxy_pass http://rundeck;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # セキュリティヘッダー完全除去
            proxy_hide_header Content-Security-Policy;
            proxy_hide_header X-Content-Security-Policy;
            proxy_hide_header X-WebKit-CSP;
            proxy_hide_header X-Frame-Options;
            proxy_hide_header X-Content-Type-Options;
            proxy_hide_header X-XSS-Protection;

            # エラー処理無効化
            proxy_intercept_errors off;

            # キャッシュ設定
            expires 1d;
            add_header Cache-Control "public, immutable";
        }

        # アセットフォールバック処理
        location @fallback_assets {
            # 静的ファイルの代替処理
            return 204;
        }

        # 認証確認エンドポイント（内部用）
        location /auth/verify {
            internal;
            proxy_pass http://backend/auth/verify;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
        }

        # 認証エラー時のリダイレクト
        location @auth_redirect {
            set $redirect_port "";
            if ($server_port != 80) {
                set $redirect_port :$server_port;
            }
            return 302 http://localhost:9000/oauth2/start?rd=$scheme://localhost:9000$request_uri;
        }

        # 静的ファイル（認証不要）
        location ~* \.(ico|css|js|gif|jpe?g|png|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # キャッシュ設定
            expires 1d;
            add_header Cache-Control "public, immutable";
        }

        # バックエンドアプリケーションへの直接プロキシ
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # タイムアウト設定
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # ヘルスチェックエンドポイント（認証不要）
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 静的ファイル用の設定（必要に応じて）
        location /static/ {
            auth_request /oauth2/auth;
            error_page 401 = @error401;

            alias /var/www/static/;
            expires 1d;
            add_header Cache-Control "public, immutable";
        }
    }

    # HTTPS設定（SSL証明書がある場合）
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #
    #     # 上記のHTTP設定と同じlocationブロックを使用
    # }
}
