
name = Rundeck Logging Configuration
property.baseDir = /home/rundeck/server/logs
property.ansiConsole = true
property.classLength = {2}
property.prefix = [%style{%d{ISO8601}}{dim, noConsoleNoAnsi=${ansiConsole}}] %highlight{%-5p}{noConsoleNoAnsi=${ansiConsole}} %style{%c${classLength}}{cyan,noConsoleNoAnsi=${ansiConsole}}


appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = ${prefix} - %m%n
# Enable logging for everything. Rarely useful
rootLogger.level = warn
rootLogger.appenderRef.stdout.ref = STDOUT

# Enable audit logging

logger.audit_events.name = org.rundeck.plugin.audit.AuditLoggerPlugin
logger.audit_events.level = info
logger.audit_events.additivity = false
logger.audit_events.appenderRef.stdout.ref = audit_events

# Enable options remote URL logging
logger.rundeck.name = rundeckapp
logger.rundeck.level = info
logger.rundeck.additivity = false
logger.rundeck.appenderRef.stdout.ref = STDOUT

# Enable options remote URL logging
logger.options.name = com.dtolabs.rundeck.remoteservice.http.options
logger.options.level = info
logger.options.additivity = false
logger.options.appenderRef.stdout.ref = options

# Enable Job changes logging
logger.jobchanges.name = com.dtolabs.rundeck.data.jobs.changes
logger.jobchanges.level = info
logger.jobchanges.additivity = false
logger.jobchanges.appenderRef.stdout.ref = jobchanges

# Enable Execution event logging
logger.execevents.name = org.rundeck.execution.status
logger.execevents.level = info
logger.execevents.additivity = false
logger.execevents.appenderRef.stdout.ref = execevents

# Enable API request logging
logger.apirequests.name = org.rundeck.api.requests
logger.apirequests.level = info
logger.apirequests.additivity = false
logger.apirequests.appenderRef.stdout.ref = apirequests

# Enable Web access logging
logger.access.name = org.rundeck.web.requests
logger.access.level = info
logger.access.additivity = false
logger.access.appenderRef.access.ref = access

# Enable project logging
logger.project.name = org.rundeck.project.events
logger.project.level = info
logger.project.additivity = false
logger.project.appenderRef.stdout.ref = project

# Enable Storage logging
logger.storage.name = org.rundeck.storage.events
logger.storage.level = info
logger.storage.additivity = false
logger.storage.appenderRef.storage.ref = storage

# Enable Project manager logging
logger.prjmanager.name = grails.app.services.rundeck.services.ProjectManagerService
logger.prjmanager.level = info
logger.prjmanager.additivity = false
logger.prjmanager.appenderRef.stdout.ref = STDOUT

# Enable this logger to log Hibernate output
# handy to see its database interaction activity
logger.hibernate-core.name = org.hibernate
logger.hibernate-core.level = error
logger.hibernate-core.additivity = false
logger.hibernate-core.appenderRef.stdout.ref = STDOUT

# Enable this logger to see what Spring does, occasionally useful
logger.spring-core.name = org.springframework
logger.spring-core.level = warn
logger.spring-core.additivity = false
logger.spring-core.appenderRef.stdout.ref = STDOUT

#Quell a noisy WARN from this class
logger.springBeanPropertyDescriptor.name = org.springframework.beans.GenericTypeAwarePropertyDescriptor
logger.springBeanPropertyDescriptor.level = error
logger.springBeanPropertyDescriptor.additivity = false
logger.springBeanPropertyDescriptor.appenderRef.stdout.ref = STDOUT

# This logger covers all of Grails' internals
# Enable to see whats going on underneath.
logger.internals.name = org.codehaus.groovy.grails
logger.internals.level = warn
logger.internals.additivity = false
logger.internals.appenderRef.stdout.ref = STDOUT

# This logger is useful if you just want to see what Grails
# configures with Spring at runtime. Setting to debug will show
# each bean that is configured
logger.spring.name = org.codehaus.groovy.grails.commons.spring
logger.spring.level = warn
logger.spring.additivity = false
logger.spring.appenderRef.stdout.ref = STDOUT

# Interesting Logger to see what some of the Grails factory beans are doing
logger.bean-factory.name = org.codehaus.groovy.grails.beans.factory
logger.bean-factory.level = warn
logger.bean-factory.additivity = false
logger.bean-factory.appenderRef.stdout.ref = STDOUT

# This logger is for Grails' public APIs within the grails. package
logger.grails.name = grails
logger.grails.level = warn
logger.grails.additivity = false
logger.grails.appenderRef.stdout.ref = STDOUT

# Jetty
logger.jetty.name = org.mortbay.log
logger.jetty.level = warn
logger.jetty.additivity = false
logger.jetty.appenderRef.stdout.ref = STDOUT

# Grails Database Migration Plugin
logger.migration.name = org.grails.plugins.databasemigration
logger.migration.level = info
logger.migration.additivity = false
logger.migration.appenderRef.stdout.ref = STDOUT

# Liquibase Migrations
logger.liquibase.name = liquibase
logger.liquibase.level = info
logger.liquibase.additivity = false
logger.liquibase.appenderRef.stdout.ref = STDOUT

#
# file - DailyRollingFileAppender
#


#log4j.logger.org.codehaus.groovy.grails.plugins.quartz=debug,stdout
#log4j.additivity.org.codehaus.groovy.grails.plugins.quartz=false

#
# audit
#
appender.audit.type=Console
appender.audit.name = audit
appender.audit.layout.type = PatternLayout
appender.audit.layout.pattern = ${prefix} - %m%n

#
# audit events
#
appender.audit_events.type=Console
appender.audit_events.name = audit_events
appender.audit_events.layout.type = PatternLayout
appender.audit_events.layout.pattern = ${prefix} - %m%n

#
# options log
#
# Logs remote HTTP requests for Options JSON data
#
appender.options.type=Console
appender.options.name=options
appender.options.layout.type = PatternLayout
appender.options.layout.pattern = ${prefix} %X{httpStatusCode} %X{contentLength}B %X{durationTime}ms %X{lastModifiedDateTime} [%X{jobName}] %X{url} %X{contentSHA1}%n

#
# storage log
#
# Logs events for Rundeck storage layer
#
appender.storage.type=Console
appender.storage.name=storage
appender.storage.layout.type = PatternLayout
appender.storage.layout.pattern = ${prefix} %X{action} %X{type} %X{path} %X{status} %X{metadata}%n

#
# job changes log
#
# Logs all Job definition changes
#
appender.jobchanges.type=Console
appender.jobchanges.name = jobchanges
appender.jobchanges.layout.type = PatternLayout
appender.jobchanges.layout.pattern = ${prefix} %X{user} %X{change} [%X{id}] %X{project} "%X{groupPath}/%X{jobName}" (%X{method})%X{extraInfo}%n

#
# executions log
#
# Logs all execution events (start,finish,delete)
#
appender.execevents.type=Console
appender.execevents.name = execevents
appender.execevents.layout.type = PatternLayout
appender.execevents.layout.pattern = ${prefix} %X{eventUser} %X{event} [%X{id}:%X{state}] %X{project} %X{user}/%X{abortedby} \"%X{groupPath}/%X{jobName}  %X{argString}\"[%X{uuid}] %n

#
# api request log
#
# Logs all API requests
#
appender.apirequests.type=Console
appender.apirequests.name = apirequests
appender.apirequests.layout.type = PatternLayout
appender.apirequests.layout.pattern = ${prefix} "%X{method} %X{uri}" %X{remoteHost} %X{secure} %X{remoteUser} %X{authToken} %X{duration} %X{project} (%X{userAgent})%n

#
# Web access log
#
# Logs all Web requests
#
appender.access.type=Console
appender.access.name = access
appender.access.layout.type = PatternLayout
appender.access.layout.pattern = ${prefix} "%X{method} %X{uri}" %X{remoteHost} %X{secure} %X{remoteUser} %X{authToken} %X{duration} %X{project} [%X{contentType}] (%X{userAgent})%n

#
# project log
#
# Logs Project changes
#
appender.project.type=Console
appender.project.name = project
appender.project.layout.type = PatternLayout
appender.project.layout.pattern = ${prefix} - %m%n
# Enable cluster-messages logging
logger.messaging.name = org.rundeck.messaging.events
logger.messaging.level = info
logger.messaging.additivity = false
logger.messaging.appenderRef.stdout.ref = messaging
#
# cluster-messages log
#
# Logs cluster messages
#
appender.messaging.type=Console
appender.messaging.name = messaging
appender.messaging.layout.type = PatternLayout
appender.messaging.layout.pattern = ${prefix} - id[%X{id}] namespace[%X{namespace}] topic[%X{topic}] type[%X{type}] sender[%X{sender}] state[%X{state}] destination[%X{destination}] %m%n
